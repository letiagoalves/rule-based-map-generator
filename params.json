{"name":"rule-based-map-generator","tagline":"rule based map generator","body":"# rule-based-map-generator\r\n#####[node](http://nodejs.org) framework for real time generation of grid/tiled maps based on a previously defined set of constraints/rules\r\n\r\n##Philosophy\r\n\r\nThis project goal is to provide an open framework to ease the generation of game worlds using predefined rules in a semi-automatic approach joining the benefits of procedural generation with manual art work creation.\r\nBy other words, this framework generates structured maps in real time handling expansions when needed respecting game design rules in order to create additive game worlds.\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install rule-based-map-generator\r\n```\r\n\r\n##Features\r\n\r\n###Rules\r\nYou can design your maps using different rules. They are:\r\n\r\n####World based\r\n- Initial map size (mandatory)\r\n- Horizontal and vertical bounds\r\n- Map center\r\n- Evaluation period *(not yet implemented)*\r\n\r\n####Block based\r\n- Blacklist\r\n- Whitelist\r\n- Maximum occupation\r\n- Maximum occupation by percentage\r\n- Minimum distance between other blocks\r\n\r\n###Strategies\r\n- square grid\r\n- hexagonal grid *(not yet implemented)*\r\n\r\n##Examples\r\n\r\nThe easiest way to create a world instance is to use the World configuration parser. This parser receives a literal object with the world definition. For example:\r\n\r\n```javascript\r\nvar ruleBasedMapGenerator = require('rule-based-map-generator');\r\nvar worldParser = ruleBasedMapGenerator.parser;\r\n\r\nvar world = worldParser.parse({\r\n    seed: 1337,\r\n    strategy: 'squareGrid',\r\n    initialMapSize: 4,\r\n    blocks: [{\r\n        id: 'b1',\r\n        connectors: {\r\n            UP: 'c2', RIGHT: 'c3', BOTTOM: 'c2', LEFT: 'c3'\r\n        },\r\n        constraints: {}\r\n    }, {\r\n        id: 'b2',\r\n        connectors: {\r\n            UP: 'c1', RIGHT: 'c3', BOTTOM: 'c1', LEFT: 'c3'\r\n        },\r\n        constraints: {}\r\n    }, {\r\n        id: 'b3',\r\n        connectors: {\r\n            UP: 'c4', RIGHT: 'c4', BOTTOM: 'c4', LEFT: 'c4'\r\n        },\r\n        constraints: {}\r\n    }],\r\n    connectors: [\r\n        { id: 'c1', type: 'whitelist', blockIds: ['b1']},\r\n        { id: 'c2', type: 'whitelist', blockIds: ['b2']},\r\n        { id: 'c3', type: 'whitelist', blockIds: ['b3']},\r\n        { id: 'c4', type: 'whitelist', blockIds: ['b1', 'b2', 'b3']}]\r\n});\r\n```\r\n\r\nOr you can build the world manually:\r\n\r\n<!--\r\n```javascript\r\nvar ruleBasedMapGenerator = require('rule-based-map-generator');\r\nvar api = ruleBasedMapGenerator.api;\r\nvar strategyFactory = api.getStrategyFactory('squareGrid');\r\nvar seed = 1337;\r\nvar randomMatrixGenerator = randomMatrix(seed);\r\nstrategyInstance = strategyFactory.createInstance(randomMatrixGenerator);\r\n```\r\n-->\r\n\r\n###### //TODO: Create example documentation\r\n\r\n\r\n###Contribute\r\nThis project is being developed in an academic context so contributions are temporarily not allowed.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}