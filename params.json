{"name":"rule-based-map-generator","tagline":"rule based map generator","body":"# rule-based-map-generator\r\n##### [node](http://nodejs.org) framework for real time generation of grid/tiled maps based on a previously defined set of constraints/rules\r\n\r\n___\r\n\r\n## Philosophy\r\n\r\nThis project goal is to provide an open framework to ease the generation of game worlds using predefined rules in a semi-automatic approach joining the benefits of procedural generation with manual art work creation.\r\nBy other words, this framework generates structured maps in real time handling expansions when needed respecting game design rules in order to create additive game worlds.\r\n\r\nSee a video demonstration here:\r\n[**https://youtu.be/-yyQ-vyKdYw**](https://youtu.be/-yyQ-vyKdYw)\r\n\r\n___\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install rule-based-map-generator\r\n```\r\n\r\n___\r\n\r\n## Features\r\n\r\n### Rules\r\nYou can design your maps using different rules. They are:\r\n\r\n#### World based\r\n- Initial map size (mandatory)\r\n- Horizontal and vertical bounds\r\n- Map center\r\n- Evaluation period *(not yet implemented)*\r\n\r\n#### Block based\r\n- Blacklist\r\n- Whitelist\r\n- Maximum occupation\r\n- Maximum occupation by percentage\r\n- Minimum distance between other blocks\r\n\r\n### Strategies\r\n- square grid\r\n- hexagonal grid *(not yet implemented)*\r\n\r\n___\r\n\r\n## Usage\r\n\r\n### World creation\r\n\r\nBelow is a minimal example of how to configure and create a world.\r\n\r\nFirst require rule-based-map-generator module.\r\n```js\r\nvar ruleBasedMapGenerator = require('rule-based-map-generator');\r\n```\r\n\r\nHere we create a strategy of generation. In these case we will choose a strategy for square grid maps.\r\n```js\r\nvar strategyName = 'squareGrid';\r\nvar worldSeed = 1337;\r\nvar strategy = ruleBasedMapGenerator.createStrategy(strategyName, worldSeed);\r\n```\r\n\r\nIn order to create blocks, we need to create a block factory for the previously created strategy. Then we create 3 blocks without constraints for the sake of simplicity.\r\n```js\r\nvar blockFactory = ruleBasedMapGenerator.createBlockFactory(strategy);\r\nvar block1 = blockFactory('B1');\r\nvar block2 = blockFactory('B2');\r\nvar block3 = blockFactory('B3');\r\n```\r\n\r\nTo define how blocks connect between each other in the world we need to create connectors.\r\n```js\r\nvar connector1 = ruleBasedMapGenerator.createConnectorInstance('C1', 'whitelist', ['B1', 'B2', 'B3']);\r\nvar connector2 = ruleBasedMapGenerator.createConnectorInstance('C1', 'blacklist', ['B2']);\r\n```\r\n\r\nNow we can attach the connector to the desired blocks sides.\r\n```js\r\nblock1.setSideConnector('LEFT', connector1);\r\nblock1.setSideConnector('RIGHT', connector1);\r\nblock1.setSideConnector('UP', connector2);\r\nblock1.setSideConnector('BOTTOM', connector2);\r\n\r\nblock2.setSideConnector('LEFT', connector1);\r\nblock2.setSideConnector('RIGHT', connector1);\r\n// and so on...\r\n```\r\n\r\nBefore creating the world instance we need to create the world constraints.\r\n```js\r\nvar initialMapSize = 4;\r\nvar bounds = { horizontal: 10, vertical: 10 };\r\nvar mapCenter = 'B2';\r\nvar worldConstraints = ruleBasedMapGenerator.createWorldConstraints(initialMapSize, bounds, mapCenter);\r\n```\r\n\r\nNow we are ready to create our world.\r\n```js\r\nvar world = ruleBasedMapGenerator.createWorldInstance(\r\n    strategy,\r\n    worldConstraints,\r\n    [block1, block2, block3] // set of blocks\r\n);\r\n```\r\n\r\n**But wait! There is more.** Instead of setting up the world using all these API methods you can take advantage of the **World Parser** to create a world based on a single configuration.\r\n```js\r\nvar worldParser = require('rule-based-map-generator').parser;\r\nvar configuration = require('./path/to/world/configuration.json');\r\nvar world = worldParser.parse(configuration);\r\n```\r\n\r\nYou can see examples of world configurations [here](examples/configurations/).\r\n\r\n### World generation\r\n\r\nWe can retrieve map using the following world methods:\r\n```js\r\nvar minX = 0, minY = 0, maxX = 4, maxY = 4;\r\nvar partialMap = world.getPartialMap(minX, minY, maxX, maxY);\r\n```\r\n\r\n```js\r\nvar map = world.getMap();\r\n```\r\n\r\nBoth result in a matrix representing the world. An example can be seen below:\r\n\r\n|       | 0   | 1   | 2   |\r\n| ---   | --- | --- | --- |\r\n| **0** | `{ x: 0, y: 2, block: 'B2' }` | `{ x: 1, y: 2, block: 'B1' }` | `{ x: 2, y: 2, block: 'B3' }` |\r\n| **1** | `{ x: 0, y: 1, block: 'B1' }` | `{ x: 1, y: 1, block: 'B3' }` | `{ x: 2, y: 1, block: 'B3' }` |\r\n| **2** | `{ x: 0, y: 0, block: 'B1' }` | `{ x: 1, y: 0, block: 'B1' }` | `{ x: 2, y: 2, block: 'B2' }` |\r\n\r\n___\r\n\r\n## API\r\n\r\nSoon.\r\n\r\n___\r\n\r\n## Examples\r\n\r\nYou can see examples [here](examples/).\r\n\r\n___\r\n\r\n### Contribute\r\nThere is still a lot to be done from adding new rules to adding new generation strategies. If you want to contribute, don't be shy and create a pull request.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}